/////////////////////////////////매개변수 사용 불가
package org.example;

class Main {
    public static void main(String[] args) {
        전사 a전사 = new 전사();
        String 이름 = "칸";
        a전사.이름 = 이름;
        a전사.나이 = 20;
        a전사.자기소개();
        a전사.나이++;
        a전사.자기소개();
        a전사.나이 = 30;
        a전사.이름 = "카니";
        a전사.자기소개();
        a전사.a무기 = new 활();
        a전사.공격();
        // 출력 : 카니가 활로 공격합니다.
        a전사.a무기 = new 칼();
        a전사.공격();
        // 출력 : 카니가 칼로 공격합니다.
    }
}

class 전사 {
    // 인스턴스 변수
    static String 이름;
    // 인스턴스 변수
    int 나이;
    // 인스턴스 변수
    무기 a무기;
    void 자기소개() {
        System.out.println("안녕하세요. 저는 " + this.나이 + "살 " + this.이름 + " 입니다.");
    }
    void 공격 (){
        a무기.공격();
    }
}

abstract class 무기 {
    abstract void 공격();
}

class 칼 extends 무기 {
    void 공격 (){
        System.out.println(전사.이름 +"이 칼로 공격합니다");
    }
}

class 활 extends 무기 {
    void 공격 (){
        System.out.println(전사.이름 +"이 활로 공격합니다");
    }
}



/////////////////////////////////////매개변수 사용


package org.example;

class Main {
    public static void main(String[] args) {
        전사 a전사 = new 전사();

        String 이름 = "칸";
        a전사.이름 = 이름;
        a전사.나이 = 20;
        a전사.자기소개();

        a전사.나이++;
        a전사.자기소개();

        a전사.나이 = 30;
        a전사.이름 = "카니";
        a전사.자기소개();

        a전사.a무기 = new 활();
        a전사.공격();
        // 출력 : 카니가 활로 공격합니다.

        a전사.a무기 = new 칼();
        a전사.공격();
        // 출력 : 카니가 칼로 공격합니다.
    }
}

class 전사 {
        String 이름;
        int 나이;
        void 자기소개(){
            System.out.println("안녕하세요. 저는 " + this.나이 + "살 " + this.이름 + " 입니다.");
        }
        무기 a무기;
        void 공격(){
            a무기.공격(this.이름);
        }
}

abstract class 무기  {
    abstract void 공격(String 이름);
}
class 활 extends 무기 {
    void 공격 (String 이름){
        System.out.println(이름+"(이)가 활 로 공격합니다");
    }
}
class 칼 extends  무기 {
    void 공격(String 이름) {
        System.out.println(이름 + "(이)가 칼 로 공격합니다");
    }
}




//     ******************************* 로봇사람문제
//                                     ** 객체로 접근하면 지역변수 변경 및 불러오기 가능 / 클래스로 접근하면 전역변수(static) 로 설정해야 변수 접근 가능
//                                     ** 리턴으로 값을 반환하려면 void 가 아닌 자료형타입 (int, boolean 등) 으로 메서드를 생성해야함
//                                     1. 객체선언 (new) 를 하지않으면 '로봇' 은 클래스명임  [로봇클래스 생성]
//                                     2. 사람 타입의 a사람 을 만들어야 함으로 사람 클래스 생성
//                                     3. int i = 로봇.get정수(); /  i 를 정수로받아야 함으로 로봇 클래스에 int 타입 get정수 함수 생성
//                                     4. [로봇.get정수();] 함수 생성
//                                     5.
//    int i = 로봇.get정수();
//    boolean b = 로봇.get논리();
//    사람 a사람 = 로봇.get사람();
//    사람 a사람2 = 로봇.get사람2();
//    사람 a사람3 = 로봇.get사람3();
//    사람 a사람4 = 로봇.get사람4();
//    사람 a사람5 = 로봇.get사람5(123, false);
//
//class 로봇  {
//
//     함수명 () {
//
//    }
//
//    static int get정수(){
//        return  1;
//    }
//    static boolean get논리(){
//        return true;
//    }
//    static 사람 get사람(){
//        return new 사람();
//    }
//
//     static 사람 get사람2() {
//         return new 사람();
//     }
//     static 사람 get사람3(){
//        return new 사람();
//    }
//    static 사람 get사람4(){
//        return new 사람();
//    }
//
//     static 사람 get사람5(int num , boolean x){
//        return new 사람();
//    }
//}
//    class 사람 {
//    }
//
//
//
//



//    전사 a전사 =  new 전사 ();
//    a전사.이름="카니";
//            a전사.나이= 22;
//            a전사.a무기= new 칼();
//           a전사 .공격();
//
//            a전사.이름="초코";
//            a전사.a무기=new 활();
//            a전사.공격();
//
//class 전사 {
//    int 나이 ;
//    String 이름;
//    무기 a무기 ;
//    void 공격 (){
//        a무기.작동(this.이름);
//    }
//}
//
//abstract class 무기{
//    abstract void 작동(String name);
//}
//class 칼 extends 무기{
//    void 작동 (String name){
//        System.out.println(name + "가 칼로 공격합니다.");
//    }
//}
//class 활 extends 무기{
//    void 작동 (String name){
//        System.out.println(name + "가 활로 공격합니다.");
//    }
//}










//class 전사 {
//    int 나이 ;
//    String 이름;
//
//    무기 a무기;
//
// *************************1.전사 안에 a무기 라는 변수가 있어야함/ 변수에 칼 클래스를 담아야함 =  a무기는 클래스를 담을수 있는 변수 여야함
//    // *************************2.칼이라는 클래스가 들어갈 클래스타입(클래스이름)의 a무기를 선언
// ************************3. a무기(칼 클래스) 에 활 도 넣어야함
//    // ***********************4. 활을 칼에 넣어야 함으로 상속 시켜줌.
//    //*************************5. 칼에 상속시켜주는 것이 아닌 공통분모 (무기) 클래스를 따로 만들어서 실행도 가능
//
//    void 공격 ( ){
//        a무기.작동(this.이름) ;
//    }
//}

// *************************1.전사 안에 a무기 라는 변수가 있어야함/ 변수에 칼 클래스를 담아야함 =  a무기는 클래스를 담을수 있는 변수 여야함
// *************************2.칼이라는 클래스타입의 a무기를 선언
// ************************3. a무기(칼 클래스) 에 활 도 넣어야함
//    // ***********************4. 활을 칼에 넣어야 함으로 상속 시켜줌.
//*************************5. 칼에 상속시켜주는 것이 아닌 공통분모 (무기) 클래스를 따로 만들어서 실행도 가능

//
// abstract class 무기 {
//    abstract void 작동();
//}
//class 칼 extends 무기 {
//    void 작동 (String 이름){
//        System.out.println(이름+"(이)가 칼로 공격합니다");
//    }
//}
//class 활 extends 무기 {
//    // ***********************4. 활을 칼에 넣어야 함으로 상속 시켜줌.
//    void 작동 (String 이름){
//        System.out.println(이름+"(이)가 활로 공격합니다");
//    }
//}
//
//
//









